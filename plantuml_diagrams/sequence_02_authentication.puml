@startuml Authentication Sequence
title Sequence Diagram: Authentication Flow (Đăng nhập/Đăng ký)

actor User
participant Browser
participant routes.auth as "Auth Route\n(auth.py)"
participant Flask as "Flask App"
participant Database as "SQLite DB"
participant UserModel as "User Model\n(models.py)"
participant Session as "Flask Session"
external GoogleOAuth as "Google OAuth API"

== User Registration ==
User -> Browser: Truy cập /register
Browser -> routes.auth: GET /register
activate routes.auth
routes.auth --> Browser: Render auth_register.html
deactivate routes.auth
Browser -> User: Show registration form

User -> Browser: Nhập username + password
Browser -> routes.auth: POST /register\n{username, password}
activate routes.auth

routes.auth -> routes.auth: Validate input
alt Empty input
  routes.auth --> Browser: Flash "Vui lòng nhập đủ thông tin"
  Browser -> User: Show error
else Valid input
  routes.auth -> Database: Query User by username
  activate Database
  Database --> routes.auth: User exists?
  deactivate Database
  
  alt Username exists
    routes.auth --> Browser: Flash "Tên đăng nhập đã tồn tại"
  else Username available
    routes.auth -> UserModel: User(username=username)
    activate UserModel
    UserModel -> UserModel: set_password(password)
    UserModel -> UserModel: generate_password_hash()
    UserModel --> routes.auth: User instance
    deactivate UserModel
    
    routes.auth -> Database: session.add(user)
    routes.auth -> Database: session.commit()
    activate Database
    Database --> routes.auth: User saved
    deactivate Database
    
    routes.auth --> Browser: Flash "Đăng ký thành công!"
    routes.auth --> Browser: Redirect /login
  end
end
deactivate routes.auth

== User Login (Username/Password) ==
User -> Browser: Truy cập /login
Browser -> routes.auth: GET /login
activate routes.auth
routes.auth --> Browser: Render auth_login.html
deactivate routes.auth
Browser -> User: Show login form

User -> Browser: Nhập username + password
Browser -> routes.auth: POST /login\n{username, password}
activate routes.auth

routes.auth -> Database: Query User by username
activate Database
Database --> routes.auth: User or None
deactivate Database

alt User not found
  routes.auth --> Browser: Flash "Sai tên đăng nhập hoặc mật khẩu"
else User found
  routes.auth -> UserModel: user.check_password(password)
  activate UserModel
  UserModel -> UserModel: check_password_hash()
  UserModel --> routes.auth: True/False
  deactivate UserModel
  
  alt Password incorrect
    routes.auth --> Browser: Flash "Sai tên đăng nhập hoặc mật khẩu"
  else Password correct
    routes.auth -> Flask: login_user(user, remember=True)
    activate Flask
    Flask -> Session: Set user session
    activate Session
    Session --> Flask: Session saved
    deactivate Session
    Flask --> routes.auth: User logged in
    deactivate Flask
    
    routes.auth -> Session: session.permanent = True
    routes.auth --> Browser: Redirect /game
  end
end
deactivate routes.auth

== Google OAuth Login ==
User -> Browser: Click "Đăng nhập với Google"
Browser -> routes.auth: GET /login/google
activate routes.auth

routes.auth -> routes.auth: Check Google config
alt Config missing
  routes.auth --> Browser: Flash "Google Login chưa được cấu hình"
else Config OK
  routes.auth -> Flask: Get redirect_uri
  routes.auth --> Browser: Redirect to Google OAuth
end
deactivate routes.auth

Browser -> GoogleOAuth: GET authorize
activate GoogleOAuth
GoogleOAuth -> User: Show consent screen
User -> GoogleOAuth: Select account
GoogleOAuth --> Browser: Redirect /login/google/callback?code=xxx
deactivate GoogleOAuth

Browser -> routes.auth: GET /login/google/callback?code=xxx
activate routes.auth

routes.auth -> GoogleOAuth: POST token request
activate GoogleOAuth
GoogleOAuth --> routes.auth: {access_token, userinfo}
deactivate GoogleOAuth

routes.auth -> routes.auth: Parse userinfo
routes.auth -> Database: Query User by google_id
activate Database
Database --> routes.auth: User or None
deactivate Database

alt User exists
  routes.auth -> Flask: login_user(user)
  routes.auth --> Browser: Redirect /game
else User not found
  routes.auth -> Database: Query User by email
  activate Database
  Database --> routes.auth: ExistingUser or None
  deactivate Database
  
  alt Email exists - Link account
    routes.auth -> Database: Update existingUser.google_id
    routes.auth -> Database: session.commit()
    routes.auth -> Flask: login_user(existingUser)
    routes.auth --> Browser: Flash "Đã liên kết với Google"
    routes.auth --> Browser: Redirect /game
  else Email not found - Create new
    routes.auth -> routes.auth: Generate unique username
    routes.auth -> UserModel: User(username, email, google_id)
    routes.auth -> Database: session.add(newUser)
    routes.auth -> Database: session.commit()
    routes.auth -> Flask: login_user(newUser)
    routes.auth --> Browser: Redirect /game
  end
end
deactivate routes.auth

@enduml

