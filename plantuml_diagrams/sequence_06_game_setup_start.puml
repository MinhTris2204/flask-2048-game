@startuml Game Setup and Start Sequence
title Sequence Diagram: Game Setup and Start New Game

actor User
participant Browser
participant game.js as "Frontend\n(game.js)"
participant routes.game as "Game Route\n(game.py)"
participant routes.api as "API Route\n(api.py)"
participant Session as "Flask Session"
participant Game2048 as "Game Logic\n(game_logic.py)"
participant Database as "SQLite DB"
participant UserModel as "User Model"

== Initial Game Load ==
User -> Browser: Truy cập /game
Browser -> routes.game: GET /game
activate routes.game

routes.game -> routes.game: @login_required
routes.game -> UserModel: current_user
activate UserModel
UserModel --> routes.game: User object
deactivate UserModel

routes.game -> UserModel: check_premium_status()
activate UserModel
UserModel -> Database: Query premium_expires_at
activate Database
Database --> UserModel: expires_at
deactivate Database

alt Premium expired
  UserModel -> Database: Update is_premium = False
  UserModel -> Database: session.commit()
end
UserModel --> routes.game: Status checked
deactivate UserModel

routes.game -> Session: Check game_state
activate Session
Session --> routes.game: game_state or None
deactivate Session

alt No game_state
  routes.game -> Game2048: Game2048.__init__(size=4)
  activate Game2048
  Game2048 -> Game2048: empty_grid()
  activate Game2048
  Game2048 --> Game2048: [[0]*4 for _ in range(4)]
  deactivate Game2048
  Game2048 --> routes.game: Instance with empty grid
  deactivate Game2048
  
  routes.game -> Game2048: setup()
  activate Game2048
  
  Game2048 -> Game2048: grid = empty_grid()
  Game2048 -> Game2048: score = 0
  Game2048 -> Game2048: moves = 0
  Game2048 -> Game2048: game_over = False
  Game2048 -> Game2048: last_state = None
  
  Game2048 -> Game2048: add_random_tile()
  activate Game2048
  Game2048 -> Game2048: random_empty_cell()
  activate Game2048
  Game2048 --> Game2048: (r, c) random empty position
  deactivate Game2048
  Game2048 -> Game2048: grid[r][c] = 2 or 4 (90% chance of 2)
  Game2048 --> routes.game: {"r": r, "c": c}
  deactivate Game2048
  
  Game2048 -> Game2048: add_random_tile()
  activate Game2048
  Game2048 -> Game2048: random_empty_cell()
  activate Game2048
  Game2048 --> Game2048: (r, c) random empty position
  deactivate Game2048
  Game2048 -> Game2048: grid[r][c] = 2 or 4
  Game2048 --> routes.game: {"r": r, "c": c}
  deactivate Game2048
  
  Game2048 --> routes.game: {grid, score, moves, new_tiles}
  deactivate Game2048
  
  routes.game -> Session: save_game(game)
  activate Session
  Session --> routes.game: Game2048 object pickled
  Session --> routes.game: Saved to session
  deactivate Session
  
else Has game_state
  routes.game -> Session: Load existing game
  activate Session
  Session --> routes.game: Game2048 instance
  deactivate Session
end

routes.game -> Database: Query current_user data
activate Database
Database --> routes.game: {username, is_premium}
deactivate Database

routes.game --> Browser: Render game.html\n{username, is_premium}
deactivate routes.game
Browser -> User: Display game page

== Page Load ==
Browser -> game.js: Load game.html
activate game.js

game.js -> game.js: Initialize DOM elements
game.js -> game.js: Setup event listeners
game.js -> game.js: Setup keyboard events
game.js -> game.js: Setup button handlers
game.js -> game.js: Setup swipe gestures (mobile)

game.js -> game.js: Load best score from localStorage
game.js -> game.js: best = localStorage.getItem("best") || "0"
game.js -> Browser: Display best score

game.js -> Browser: Render board
game.js --> User: Ready to play
deactivate game.js

== Start New Game ==
User -> Browser: Click "Game mới"
Browser -> game.js: startGame()
activate game.js

game.js -> game.js: Set inputLocked = True
game.js -> routes.api: POST /api/start_game
deactivate game.js
activate routes.api

routes.api -> routes.api: @login_required
routes.api -> Game2048: Game2048.__init__()
activate Game2048
Game2048 -> Game2048: Initialize empty game
Game2048 --> routes.api: Fresh instance
deactivate Game2048

routes.api -> Game2048: setup()
activate Game2048
Game2048 -> Game2048: empty_grid()
Game2048 -> Game2048: add_random_tile() x2
Game2048 --> routes.api: {grid, score, moves, new_tiles}
deactivate Game2048

routes.api -> Session: save_game(game)
activate Session
Session --> routes.api: Saved
deactivate Session

routes.api --> game.js: {ok: True, grid, score, moves, can_undo: False}
deactivate routes.api

game.js -> game.js: render(data)
activate game.js

game.js -> game.js: Clear board
game.js -> game.js: Create empty tiles
game.js -> game.js: Create tile elements for values
game.js -> game.js: Add spawn animation to new tiles
game.js -> Browser: Update DOM

game.js -> game.js: Update score display
game.js -> game.js: Update moves display
game.js -> game.js: Check and update best score
game.js -> game.js: updateUndoButton(canUndo)

game.js -> game.js: removeGameOverOverlay()
game.js -> game.js: Set inputLocked = False
game.js --> Browser: Game ready
deactivate game.js

Browser -> User: Show new game board
deactivate Browser

@enduml

