@startuml Premium Payment Sequence
title Sequence Diagram: Premium Payment Flow (PayOS Integration)

actor User
participant Browser
participant game.js as "Frontend\n(game.js)"
participant routes.premium as "Premium Route\n(premium.py)"
participant routes.api as "API Route\n(api.py)"
participant Database as "SQLite DB"
participant PayOSHelper as "PayOS Helper\n(payos_helper.py)"
external PayOSGateway as "PayOS Gateway\nExternal"
participant Session as "Flask Session"
participant UserModel as "User Model"
participant OrderModel as "Order Model"
participant PremiumPlanModel as "PremiumPlan Model"

== Premium Selection ==
User -> Browser: Truy cập /premium/manage
Browser -> routes.premium: GET /premium/manage
activate routes.premium

routes.premium -> UserModel: current_user.check_premium_status()
activate UserModel
UserModel -> Database: Query premium_expires_at
activate Database
Database --> UserModel: expires_at
deactivate Database

alt Premium expired
  UserModel -> Database: Update is_premium = False
  UserModel -> Database: session.commit()
end

UserModel --> routes.premium: Status checked
deactivate UserModel

routes.premium -> Database: Query PremiumPlan (is_active=True)
activate Database
Database --> routes.premium: List of plans
deactivate Database

routes.premium -> Database: Query Order (user_id)
activate Database
Database --> routes.premium: User orders
deactivate Database

routes.premium --> Browser: Render premium_manage.html
deactivate routes.premium
Browser -> User: Display plans + orders

== Initiate Payment ==
User -> Browser: Click "Mua gói" on a plan
Browser -> routes.premium: GET /payment/<plan_id>
activate routes.premium

routes.premium -> Database: Query PremiumPlan by plan_id
activate Database
Database --> routes.premium: Plan or None
deactivate Database

alt Plan not found or inactive
  routes.premium --> Browser: Flash "Gói không khả dụng"
  routes.premium --> Browser: Redirect /premium/manage
else Plan valid
  routes.premium --> Browser: Render payment.html
end
deactivate routes.premium

Browser -> User: Show payment form

== Create Payment Link ==
User -> Browser: Click "Thanh toán PayOS"
Browser -> routes.premium: POST /payment/<plan_id>\n{payment_method: "payos"}
activate routes.premium

routes.premium -> Session: session.permanent = True
activate Session
Session --> routes.premium: OK
deactivate Session

routes.premium -> OrderModel: Order(user_id, plan_id, amount, status="pending")
activate OrderModel
OrderModel -> OrderModel: Generate UUID transaction_id
OrderModel --> routes.premium: Order instance
deactivate OrderModel

routes.premium -> Database: session.add(order)
routes.premium -> Database: session.commit()
activate Database
Database --> routes.premium: Order saved
deactivate Database

routes.premium -> PayOSHelper: create_payment_link(...)
activate PayOSHelper
PayOSHelper -> PayOSHelper: Create HMAC signature
PayOSHelper -> PayOSGateway: POST /v2/payment/create
activate PayOSGateway

PayOSGateway -> PayOSGateway: Validate request
PayOSGateway --> PayOSHelper: Response {code, data, desc}
deactivate PayOSGateway

PayOSHelper --> routes.premium: PayOS response
deactivate PayOSHelper

routes.premium -> routes.premium: Parse response
alt PayOS error
  routes.premium --> Browser: Flash error message
  routes.premium --> Browser: Redirect /premium/manage
else Success
  routes.premium -> routes.premium: Extract checkoutUrl
  routes.premium --> Browser: Render payment_processing.html\n{checkout_url}
end
deactivate routes.premium

== PayOS Checkout ==
Browser -> PayOSGateway: GET checkoutUrl
activate PayOSGateway
PayOSGateway -> User: Show payment form
User -> PayOSGateway: Enter payment info
User -> PayOSGateway: Confirm payment

alt User cancels
  PayOSGateway --> Browser: Redirect /payos/cancel?orderCode=xxx
  deactivate PayOSGateway
  
  Browser -> routes.premium: GET /payos/cancel?orderCode
  activate routes.premium
  routes.premium -> Database: Query Order by orderCode
  activate Database
  Database --> routes.premium: Order
  deactivate Database
  
  routes.premium -> Database: Update order.status = "cancelled"
  routes.premium -> Database: session.commit()
  
  routes.premium --> Browser: Render payment_error.html
  deactivate routes.premium
else Payment success
  PayOSGateway --> Browser: Redirect /payos/return?code=00&status=PAID
  deactivate PayOSGateway
end

== Return Handler ==
Browser -> routes.premium: GET /payos/return?code=00&status=PAID&orderCode=xxx
activate routes.premium

routes.premium -> routes.premium: Verify code and status
routes.premium -> Database: Query Order by orderCode
activate Database
Database --> routes.premium: Order
deactivate Database

routes.premium -> Database: Query PremiumPlan by plan_id
activate Database
Database --> routes.premium: Plan
deactivate Database

routes.premium -> Database: Query User by user_id
activate Database
Database --> routes.premium: User
deactivate Database

routes.premium -> routes.premium: Calculate new expiration date
routes.premium -> Database: Update order.status = "completed"
routes.premium -> Database: Update order.completed_at = now()
routes.premium -> Database: Update user.is_premium = True
routes.premium -> Database: Update user.premium_expires_at
routes.premium -> Database: session.commit()

routes.premium -> Session: login_user(user)
routes.premium --> Browser: Render payment_success.html
deactivate routes.premium
Browser -> User: Show success message

== Webhook Handler (Parallel) ==
PayOSGateway -> routes.premium: POST /payos/webhook\n{webhook_data}
activate routes.premium
activate PayOSGateway

routes.premium -> PayOSHelper: verify_webhook_signature(data)
activate PayOSHelper
PayOSHelper --> routes.premium: Valid/Invalid
deactivate PayOSHelper

alt Invalid signature
  routes.premium --> PayOSGateway: 400 Invalid signature
else Valid
  routes.premium -> routes.premium: Parse webhook data
  routes.premium -> Database: Query Order by orderCode
  activate Database
  Database --> routes.premium: Order
  deactivate Database
  
  routes.premium -> routes.premium: Validate amount
  routes.premium -> routes.premium: Check order.status
  
  alt Already processed
    routes.premium --> PayOSGateway: 200 Already processed
  else Need processing
    routes.premium -> Database: Query PremiumPlan by plan_id
    activate Database
    Database --> routes.premium: Plan
    deactivate Database
    
    routes.premium -> Database: Query User by user_id
    activate Database
    Database --> routes.premium: User
    deactivate Database
    
    routes.premium -> routes.premium: Calculate expiration date
    routes.premium -> Database: Update order, user
    routes.premium -> Database: session.commit()
    
    routes.premium --> PayOSGateway: 200 Success
  end
end
deactivate routes.premium
deactivate PayOSGateway

@enduml

